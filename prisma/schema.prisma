generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?   @db.Text
  access_token       String?   @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?   @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  stripe_customer_id       String?
  stripe_subscription_item String?
  courses       Course[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Course {
  id          String      @id @default(cuid())
  title       String
  description String?
  imageUrl    String?
  price       Int?
  categoryId  String?
  isPublished Boolean     @default(false)
  attachments Attachment[]
  userId      String
  user        User        @relation(fields: [userId], references: [email])
  chapters    Chapter[]
  purchases   Purchase[]
  updated     DateTime?
  createdAt DateTime @default(now())

  category    Category?   @relation(fields: [categoryId], references: [id])
}

model Attachment {
  id       String   @id @default(cuid())
  name     String
  url      String?
  courseId String
  course   Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Category {
  id      String   @id @default(cuid())
  name    String
  courses Course[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([name])
}

model Chapter {
    id       String   @id @default(cuid())
    title String
    description String?
    videoUrl String?
    position Int?
    isPublished Boolean     @default(false)
    isFree   Boolean     @default(false)
    muxData MuxData?
    courseId String
    userProgress UserProgress[]
    course   Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model MuxData{
     id       String   @id @default(cuid())
     assetId String
     playbackId String?
     chapterId String @unique
     chapter   Chapter    @relation(fields: [chapterId], references: [id], onDelete: Cascade)
 
}

model UserProgress{
   id       String   @id @default(cuid())
  userId  String
  chapterId  String
  isCompleted Boolean @default(false)
  chapter   Chapter    @relation(fields: [chapterId], references: [id], onDelete: Cascade)
createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
   @@unique([userId, chapterId])
 
}

model Purchase{
   id       String   @id @default(cuid())
  userId String
  courseId String
  course   Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


}

model StripeCustomer {
   id       String   @id @default(cuid())
   userId String
   stripeCustomerId String @unique
     createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}